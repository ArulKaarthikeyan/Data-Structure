#include <stdio.h>
#include <stdlib.h>

#define MAX 10

struct Vertex {
   char label;
   int visited;
};

// Stack and Queue variables
int stack[MAX], top = -1;
int queue[MAX], rear = -1, front = 0, queueItemCount = 0;

// Graph variables
struct Vertex* lstVertices[MAX];
int adjMatrix[MAX][MAX];
int vertexCount = 0;

// Stack functions
void push(int item) { stack[++top] = item; }
int pop() { return stack[top--]; }
int peek() { return stack[top]; }
int isStackEmpty() { return top == -1; }

// Queue functions
void insert(int data) { queue[++rear] = data; queueItemCount++; }
int removeData() { queueItemCount--; return queue[front++]; }
int isQueueEmpty() { return queueItemCount == 0; }

// Graph functions
void addVertex(char label) {
   struct Vertex* vertex = (struct Vertex*)malloc(sizeof(struct Vertex));
   vertex->label = label;
   vertex->visited = 0;
   lstVertices[vertexCount++] = vertex;
}

void addEdge(int start, int end) {
   adjMatrix[start][end] = 1;
   adjMatrix[end][start] = 1;
}

void displayVertex(int vertexIndex) { printf("%c ", lstVertices[vertexIndex]->label); }

int getAdjUnvisitedVertex(int vertexIndex) {
   for (int i = 0; i < vertexCount; i++)
      if (adjMatrix[vertexIndex][i] == 1 && lstVertices[i]->visited == 0)
         return i;
   return -1;
}

void depthFirstSearch() {
   printf("Depth First Search: ");
   lstVertices[0]->visited = 1;
   displayVertex(0);
   push(0);
   while (!isStackEmpty()) {
      int unvisitedVertex = getAdjUnvisitedVertex(peek());
      if (unvisitedVertex == -1) {
         pop();
      } else {
         lstVertices[unvisitedVertex]->visited = 1;
         displayVertex(unvisitedVertex);
         push(unvisitedVertex);
      }
   }
   for (int i = 0; i < vertexCount; i++) lstVertices[i]->visited = 0;
   printf("\n");
}

void breadthFirstSearch() {
   printf("Breadth First Search: ");
   lstVertices[0]->visited = 1;
   displayVertex(0);
   insert(0);
   while (!isQueueEmpty()) {
      int tempVertex = removeData();
      int unvisitedVertex;
      while ((unvisitedVertex = getAdjUnvisitedVertex(tempVertex)) != -1) {
         lstVertices[unvisitedVertex]->visited = 1;
         displayVertex(unvisitedVertex);
         insert(unvisitedVertex);
      }
   }
   for (int i = 0; i < vertexCount; i++) lstVertices[i]->visited = 0;
   printf("\n");
}

void printAdjMatrix() {
   printf("\nAdjacency Matrix:\n");
   for (int i = 0; i < vertexCount; i++) {
      for (int j = 0; j < vertexCount; j++) {
         printf("%d ", adjMatrix[i][j]);
      }
      printf("\n");
   }
}
void saveGraphToFile() {
   FILE *file = fopen("C:\\Users\\arulk\\OneDrive\\Desktop\\Graph\\graph.txt", "w");  // Ensure correct file path
   if (file == NULL) {
      printf("Error opening file for writing.\n");
      return;
   }

   // Write vertices on the first line
   for (int i = 0; i < vertexCount; i++) {
      fprintf(file, "%c ", lstVertices[i]->label);
   }
   fprintf(file, "\n");

   // Write edges on subsequent lines
   for (int i = 0; i < vertexCount; i++) {
      for (int j = i + 1; j < vertexCount; j++) {
         if (adjMatrix[i][j] == 1) {
            fprintf(file, "%c %c\n", lstVertices[i]->label, lstVertices[j]->label);
         }
      }
   }

   fclose(file);
   printf("Graph saved to file.\n");
}
int main() {
   int choice;
   char label1, label2;
   for (int i = 0; i < MAX; i++)
      for (int j = 0; j < MAX; j++)
         adjMatrix[i][j] = 0;

   while (1) {
      printf("\nGraph Operations Menu:\n");
      printf("1. Add Vertex\n");
      printf("2. Add Edge\n");
      printf("3. Display Adjacency Matrix\n");
      printf("4. Depth First Search\n");
      printf("5. Breadth First Search\n");
      printf("6. Exit\n");
      printf("Enter your choice: ");
      scanf("%d", &choice);

      switch (choice) {
         case 1:
            printf("Enter label for new vertex: ");
            scanf(" %c", &label1);
            addVertex(label1);
            break;
         case 2:
            printf("Enter two vertices to add an edge (e.g., A B): ");
            scanf(" %c %c", &label1, &label2);
            int start = -1, end = -1;
            for (int i = 0; i < vertexCount; i++) {
               if (lstVertices[i]->label == label1) start = i;
               if (lstVertices[i]->label == label2) end = i;
            }
            if (start != -1 && end != -1) addEdge(start, end);
            else printf("One or both vertices not found!\n");
            break;
         case 3:
            printAdjMatrix();
            break;
         case 4:
            depthFirstSearch();
            break;
         case 5:
            breadthFirstSearch();
            break;
         case 6:
             saveGraphToFile();
            printf("Exiting...\n");
            exit(0);
         default:
            printf("Invalid choice! Please try again.\n");
      }
   }
   return 0;
}
