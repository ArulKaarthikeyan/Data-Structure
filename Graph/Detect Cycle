#include <stdio.h>
#include <stdlib.h>

#define MAX 10

struct Vertex {
    char label;
    int visited;
};

struct Vertex* lstVertices[MAX];
int adjMatrix[MAX][MAX];
int vertexCount = 0;

// Function to add vertices and edges
void addVertex(char label) {
    struct Vertex* vertex = (struct Vertex*)malloc(sizeof(struct Vertex));
    vertex->label = label;
    vertex->visited = 0;
    lstVertices[vertexCount++] = vertex;
}

void addEdge(int start, int end) {
    adjMatrix[start][end] = 1;
    adjMatrix[end][start] = 1;  // For undirected graph
}

// Function to display the vertex
void displayVertex(int vertexIndex) {
    printf("%c ", lstVertices[vertexIndex]->label);
}

// Helper function for DFS traversal
int dfs(int vertexIndex, int parent, int visited[]) {
    visited[vertexIndex] = 1;  // Mark the current vertex as visited

    // Traverse all adjacent vertices
    for (int i = 0; i < vertexCount; i++) {
        if (adjMatrix[vertexIndex][i]) {
            if (!visited[i]) {  // If the adjacent vertex hasn't been visited, recurse
                if (dfs(i, vertexIndex, visited))
                    return 1;
            } else if (i != parent) {  // If the adjacent vertex is visited and not the parent, cycle is detected
                return 1;
            }
        }
    }
    return 0;  // No cycle found from this vertex
}

// Function to detect cycles in the graph
int detectCycle() {
    int visited[MAX] = {0};  // Array to keep track of visited vertices

    // Call DFS for all vertices to handle disconnected components
    for (int i = 0; i < vertexCount; i++) {
        if (!visited[i]) {
            if (dfs(i, -1, visited)) {
                return 1;  // Cycle detected
            }
        }
    }
    return 0;  // No cycle detected
}

int main() {
    // Initialize the adjacency matrix to 0
    for (int i = 0; i < MAX; i++)
        for (int j = 0; j < MAX; j++)
            adjMatrix[i][j] = 0;

    addVertex('A');
    addVertex('B');
    addVertex('C');
    addVertex('D');
    addVertex('E');

    addEdge(0, 1); // A-B
    addEdge(0, 3); // A-D
    addEdge(1, 2); // B-C
    addEdge(1, 3); // B-D
    addEdge(2, 3); // C-D
    addEdge(3, 4); // D-E
    // addEdge(4, 2); // Uncomment this line to introduce a cycle (E-C)

    if (detectCycle()) {
        printf("Cycle detected in the graph.\n");
    } else {
        printf("No cycle detected in the graph.\n");
    }

    return 0;
}
