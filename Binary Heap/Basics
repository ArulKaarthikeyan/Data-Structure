#include<stdio.h>
#include<stdlib.h>

int maxsize = 100;
int *heap;
int size = 0;

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void percolateup(int index) {
    while (index > 0) {
        int parent = (index - 1) / 2;
        if (heap[index] < heap[parent]) {
            swap(heap+index, heap+parent);
            index = parent;
        } else {
            break;
        }
    }
}

void percolatedown(int index) {
    int min = index;
    int left = 2 * index + 1;
    int right = 2 * index + 2;

    if (left < size && heap[left] < heap[min]) {
        min = left;
    }
    if (right < size && heap[right] < heap[min]) {
        min = right;
    }

    if (min != index) {
        swap(heap+index, heap+min);
        percolatedown(min);
    }
}

void insert(int val) {
    if (size == maxsize) {
        printf("Heap overflow\n");
        return;
    }
    heap[size] = val;
    size++;
    percolateup(size - 1);
}

void deletenode(int val) {
    if (size == 0) {
        printf("Heap underflow\n");
        return;
    }
    int index = -1;
    for (int i = 0; i < size; i++) {
        if (heap[i] == val) {
            index = i;
            break;
        }
    }
    if (index == -1) {
        printf("Element not found\n");
        return;
    }
    swap(heap+index, heap+(size - 1));
    size--;
    percolatedown(index);
    printf("Element deleted successfully\n");
}

void print() {
    printf("Heap: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", heap[i]);
    }
    printf("\n");
}

void findmax() {
    if (size == 0) {
        printf("Heap underflow\n");
        return;
    }
    int max = heap[size / 2];
    for (int i = size / 2; i < size; i++) {
        if (heap[i] > max) {
            max = heap[i];
        }
    }
    printf("Maximum element: %d\n", max);
}

void findmin() {
    if (size == 0) {
        printf("Heap underflow\n");
        return;
    }
    printf("Minimum element: %d\n", heap[0]);
}

int main() {
    heap = malloc(maxsize * sizeof(int));
    int choice, val;

    while (1) {
        printf("\nChoose an operation:\n");
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Find maximum\n");
        printf("4. Find minimum\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &val);
                insert(val);
                print();
                break;
            case 2:
                printf("Enter value to delete: ");
                scanf("%d", &val);
                deletenode(val);
                print();
                break;
            case 3:
                findmax();
                break;
            case 4:
                findmin();
                break;
            case 5:
                printf("Exiting...\n");
                free(heap);
                return 0;
            default:
                printf("Invalid choice! Please try again.\n");
                break;
        }
    }
}
